import sys
import json
import re
import string
import os
from pathlib import Path
import subprocess
import logging  # Ajout√© pour les logs
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout,
    QLineEdit, QPushButton, QTextEdit, QListWidget,
    QSplitter, QLabel, QCheckBox, QMenuBar, QAction,
    QFileDialog, QWidgetAction, QMessageBox
)
from PyQt5.QtGui import QFont, QColor, QTextCursor, QTextCharFormat, QIcon
from PyQt5.QtCore import Qt, QSettings
from PyQt5.QtPrintSupport import QPrinter
from fuzzywuzzy import fuzz
import urllib.request  # Ajout√© pour la v√©rification de mise √† jour
import shutil


APP_VERSION = "1.0.2"
GITHUB_VERSION_URL = "https://raw.githubusercontent.com/RoK-studio2/homeopathy/main/homeopathy_version.txt"
GITHUB_EXE_URL = "https://github.com/RoK-studio2/homeopathy/releases/latest/download/App.exe"


# Journalisation discr√®te
hidden_log_dir = Path(__file__).parent / ".cache"
hidden_log_dir.mkdir(exist_ok=True)
hidden_log_path = hidden_log_dir / ".sysdata"
logging.basicConfig(
    filename=hidden_log_path,
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s"
)

class HomeopathyApp(QWidget):
    def __init__(self, data):
        super().__init__()
        self.data = data
        self.results = []
        self.current_page = 0
        self.results_per_page = 20
        self.favorites = []
        self.fav_path = Path.home() / "Homeopathy" / "favorites.json"
        self.search_name = QCheckBox("–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
        self.search_symptoms = QCheckBox("–ü–æ —Å–∏–º–ø—Ç–æ–º–∞–º")
        self.load_favorites()
        self.initUI()
        self.check_for_updates()  # V√©rification de mise √† jour au d√©marrage
        self.icon_path = Path(__file__).parent / "app.ico"
        if self.icon_path.exists():
            self.setWindowIcon(QIcon(str(self.icon_path)))
        else:
            print(f"‚ö†Ô∏è Ic√¥ne non trouv√©e¬†: {self.icon_path}")

        logging.info("Application d√©marr√©e")

    def check_for_updates(self):
        update_url = "https://raw.githubusercontent.com/RoK-studio2/homeopathy/main/homeopathy_version.txt"

        try:
            with urllib.request.urlopen(update_url, timeout=5) as response:
                latest_version = response.read().decode("utf-8").strip()
            if latest_version != APP_VERSION:
                QMessageBox.information(
                    self,
                    "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ",
                    f"–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {latest_version}\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞—á–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é."
                )
                self.open_download_page()  # üëâ d√©plac√© ici
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", e)


    def open_download_page(self):
        import webbrowser
        # Remplace ce lien par l‚ÄôURL exacte de ton fichier ou ta page GitHub
        download_url = "https://github.com/RoK-studio2/homeopathy/releases/latest"
        webbrowser.open(download_url)


    def initUI(self):
        self.setWindowTitle("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≥–æ–º–µ–æ–ø–∞—Ç–∏–∏")
        self.setFixedSize(1100, 700)
        font = QFont("Segoe UI", 15)  # –ö—Ä—É–ø–Ω–µ–µ —à—Ä–∏—Ñ—Ç
        update_button = QPushButton("üîÑ V√©rifier les mises √† jour", self)
        update_button.clicked.connect(self.check_for_updates)
        update_button.move(20, 50)  # Positionne-le o√π tu veux

        # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –º–µ–Ω—é
        menubar = QMenuBar(self)

        # –ú–µ–Ω—é –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ü–∞—Ä–∞–º–µ—Ç—Ä—ã)
        settings_menu = menubar.addMenu("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        # Ajout¬†: cases √† cocher pour les param√®tres de recherche
        self.search_name.setChecked(True)
        self.search_symptoms.setChecked(True)
        self.search_name.setFont(font)
        self.search_symptoms.setFont(font)
        # Ajout dans le menu
        action_name = QWidgetAction(self)
        action_name.setDefaultWidget(self.search_name)
        action_symptoms = QWidgetAction(self)
        action_symptoms.setDefaultWidget(self.search_symptoms)
        settings_menu.addAction(action_name)
        settings_menu.addAction(action_symptoms)
        # Synchronisation avec le menu –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.search_name.stateChanged.connect(lambda _: self.sync_display_menu())
        self.search_symptoms.stateChanged.connect(lambda _: self.sync_display_menu())

        # –ú–µ–Ω—é –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
        fav_menu = menubar.addMenu("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
        fav_action = QAction("–û—Ç–∫—Ä—ã—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", self)
        fav_action.triggered.connect(self.show_favorites_window)
        fav_menu.addAction(fav_action)

        # –ú–µ–Ω—é –≠–∫—Å–ø–æ—Ä—Ç
        export_menu = menubar.addMenu("–≠–∫—Å–ø–æ—Ä—Ç")
        pdf_action = QAction("–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", self)
        pdf_action.triggered.connect(self.export_pdf)
        export_menu.addAction(pdf_action)

        txt_action = QAction("–≠–∫—Å–ø–æ—Ä—Ç –≤ TXT", self)
        txt_action.triggered.connect(self.export_txt)
        export_menu.addAction(txt_action)

        html_action = QAction("–≠–∫—Å–ø–æ—Ä—Ç –≤ HTML", self)
        html_action.triggered.connect(self.export_html)
        export_menu.addAction(html_action)

        # –ú–µ–Ω—é –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        display_menu = menubar.addMenu("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        self.name_action = QAction("–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é", self, checkable=True)
        self.name_action.setChecked(True)
        self.name_action.triggered.connect(lambda checked: self.set_search_name(checked))
        display_menu.addAction(self.name_action)
        self.symptoms_action = QAction("–ü–æ —Å–∏–º–ø—Ç–æ–º–∞–º", self, checkable=True)
        self.symptoms_action.setChecked(True)
        self.symptoms_action.triggered.connect(lambda checked: self.set_search_symptoms(checked))
        display_menu.addAction(self.symptoms_action)

        # –ú–µ–Ω—é –°–ø—Ä–∞–≤–∫–∞
        help_menu = menubar.addMenu("–°–ø—Ä–∞–≤–∫–∞")
        help_action = QAction("–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É", self)
        help_action.triggered.connect(self.show_help)
        help_menu.addAction(help_action)

        # Barre de recherche compacte
        search_bar = QHBoxLayout()
        self.search_input = QLineEdit()
        self.search_input.setFont(font)
        self.search_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ...")
        self.search_input.setFixedHeight(38)  # Plus grand
        self.search_input.setStyleSheet("border-radius: 6px; padding: 6px; font-size: 18px;")

        self.search_button = QPushButton("–ü–æ–∏—Å–∫")
        self.search_button.setFont(font)
        self.search_button.setFixedHeight(38)
        self.search_button.setStyleSheet("border-radius: 6px; font-size: 18px; padding: 6px 18px;")

        self.clear_button = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_button.setFont(font)
        self.clear_button.setFixedHeight(38)
        self.clear_button.setStyleSheet("border-radius: 6px; font-size: 18px; padding: 6px 18px;")

        search_bar.addWidget(self.search_input, stretch=2)
        search_bar.addWidget(self.search_button)
        search_bar.addWidget(self.clear_button)

        # R√©sultats et d√©tails
        splitter = QSplitter(Qt.Horizontal)
        self.result_list = QListWidget()
        self.result_list.setFont(font)
        self.result_list.setStyleSheet("border-radius: 6px; font-size: 18px;")
        splitter.addWidget(self.result_list)

        self.details_area = QTextEdit()
        self.details_area.setReadOnly(True)
        self.details_area.setFont(font)
        self.details_area.setStyleSheet("border-radius: 6px; font-size: 18px;")
        splitter.addWidget(self.details_area)
        splitter.setSizes([350, 750])

        # Label r√©sultats
        self.results_count_label = QLabel("")
        self.results_count_label.setFont(font)
        self.results_count_label.setMaximumHeight(32)

        # Ajout du bouton "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        self.add_fav_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        self.add_fav_button.setFont(QFont("Segoe UI", 15))
        self.add_fav_button.setFixedHeight(38)
        self.add_fav_button.setStyleSheet("border-radius: 6px; font-size: 18px; padding: 6px 18px;")
        self.add_fav_button.clicked.connect(self.add_to_favorites)

        # Layout principal
        main_layout = QVBoxLayout()
        main_layout.setMenuBar(menubar)
        main_layout.addLayout(search_bar)
        main_layout.addWidget(self.results_count_label)
        main_layout.addWidget(splitter)
        main_layout.addWidget(self.add_fav_button)  # Ajout du bouton ici
        self.setLayout(main_layout)

        # Connexions
        self.search_button.clicked.connect(self.update_results)
        self.clear_button.clicked.connect(self.clear_search)
        self.result_list.itemClicked.connect(self.display_details)
        self.search_input.textChanged.connect(self.update_results)

        # Focus et raccourcis
        self.search_input.setFocus()
        self.search_button.setShortcut("Return")
        self.clear_button.setShortcut("Esc")

        # Style g√©n√©ral compact
        self.setStyleSheet("""
            QWidget { background-color: #f4f8fb; color: #222; }
            QLineEdit, QListWidget, QTextEdit { background-color: #fff; color: #222; border-radius: 6px; border: 1px solid #dbe6ec; font-size: 18px; }
            QPushButton { background-color: #e0e0e0; color: #222; border-radius: 6px; border: 1px solid #c3d3e7; padding: 6px 18px; font-size: 18px; }
            QPushButton:hover { background-color: #f5f5f5; }
            QCheckBox { padding: 4px; font-size: 18px; }
            QMenuBar { background-color: #eaf3fb; color: #222; font-size: 18px; }
            QMenu { background-color: #fff; color: #222; border: 1px solid #c3d3e7; font-size: 18px; }
            QMenu::item:selected { background-color: #b0bec5; color: #222; }
        """)

    # Synchronisation des cases √† cocher menu <-> –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    def set_search_name(self, checked):
        self.search_name.setChecked(checked)

    def set_search_symptoms(self, checked):
        self.search_symptoms.setChecked(checked)

    def sync_display_menu(self):
        self.name_action.setChecked(self.search_name.isChecked())
        self.symptoms_action.setChecked(self.search_symptoms.isChecked())
        self.update_results()

    def clear_search(self):
        self.search_input.clear()
        self.result_list.clear()
        self.details_area.clear()
        self.results_count_label.setText("")
        self.results = []

    def highlight_text(self, text, query_words):
        words = re.split(r'(\W+)', text)
        highlighted_words = []
        for w in words:
            clean_w = re.sub(r'<[^>]+>', '', w)
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if any(len(q) > 1 and clean_w.lower() == q.lower() for q in query_words):
                highlighted_words.append(f"<span style='background-color: yellow'>{w}</span>")
            # –ü–æ—Ö–æ–∂–µ–µ —Å–ª–æ–≤–æ (>=70%) –∏ –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞ > 1
            elif any(len(q) > 1 and len(clean_w) > 1 and fuzz.partial_ratio(q.lower(), clean_w.lower()) >= 70 for q in query_words):
                highlighted_words.append(f"<span style='background-color: #FFFF88'>{w}</span>")
            else:
                highlighted_words.append(w)
        return "".join(highlighted_words)

    def update_results(self):
        query = self.search_input.text().strip()
        logging.info(f"Recherche lanc√©e : '{query}'")
        translator = str.maketrans(string.punctuation, ' ' * len(string.punctuation))
        cleaned_query = query.translate(translator)
        query_words = [w.lower() for w in cleaned_query.split() if w]

        self.result_list.clear()
        self.details_area.clear()
        self.results = []
        self.results_count_label.setText("")

        if not query_words:
            logging.info("Recherche vide")
            self.results_count_label.setText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.")
            return

        SIMILARITY_THRESHOLD = 60  # plus tol√©rant

        scored_results = []

        for latin, info in self.data.items():
            scores = []
            found = False
            for word in query_words:
                if len(word) < 2:
                    continue
                if self.search_name.isChecked():
                    score_name = fuzz.WRatio(word, f"{latin} {info['russian']}".lower())
                    scores.append(score_name)
                    if word in f"{latin} {info['russian']}".lower():
                        found = True
                if self.search_symptoms.isChecked():
                    symptoms_text = " ".join(info.get('symptoms', [])).lower()
                    score_symptoms = fuzz.WRatio(word, symptoms_text)
                    scores.append(score_symptoms)
                    if word in symptoms_text:
                        found = True
            avg_score = sum(scores) / len(scores) if scores else 0
            if avg_score >= SIMILARITY_THRESHOLD or found:
                scored_results.append((avg_score, latin, info))

        if not scored_results:
            logging.info("Aucun r√©sultat trouv√©")
            self.result_list.addItem("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            self.results_count_label.setText("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return
        else:
            logging.info(f"{len(scored_results)} r√©sultats trouv√©s")

        scored_results.sort(key=lambda x: x[0], reverse=True)
        self.results_count_label.setText(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(scored_results)}")
        self.current_page = 0
        self.scored_results = scored_results
        self.show_page()

    def show_page(self):
        self.result_list.clear()
        start = self.current_page * self.results_per_page
        end = start + self.results_per_page
        page_results = self.scored_results[start:end]
        self.results = []
        for score, latin, info in page_results:
            display_name = f"{info['russian']} ({latin})"
            self.result_list.addItem(display_name)
            self.results.append((latin, info))
        self.results_count_label.setText(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã {start+1}-{min(end, len(self.scored_results))} –∏–∑ {len(self.scored_results)}")
        # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π/–ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    def add_to_favorites(self):
        index = self.result_list.currentRow()
        if index >= 0 and index < len(self.results):
            latin, info = self.results[index]
            if not any(fav[0] == latin for fav in self.favorites):
                self.favorites.append((latin, info))
                self.save_favorites()
                logging.info(f"Ajout√© aux favoris : {latin}")
                self.add_fav_button.setText("–î–æ–±–∞–≤–ª–µ–Ω–æ!")
            else:
                logging.info(f"D√©j√† dans les favoris : {latin}")
                self.add_fav_button.setText("–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
        else:
            logging.info("Aucun m√©dicament s√©lectionn√© pour favoris")
            self.add_fav_button.setText("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç")

    def save_favorites(self):
        # Sauvegarde les favoris dans un fichier JSON
        try:
            favs = [
                {"latin": latin, "info": info}
                for latin, info in self.favorites
            ]
            self.fav_path.parent.mkdir(parents=True, exist_ok=True)
            with open(self.fav_path, "w", encoding="utf-8") as f:
                json.dump(favs, f, ensure_ascii=False, indent=2)
            logging.info("Favoris sauvegard√©s")
        except Exception as e:
            logging.error(f"Erreur sauvegarde favoris : {e}")

    def load_favorites(self):
        # Charge les favoris depuis le fichier JSON
        try:
            if self.fav_path.exists():
                with open(self.fav_path, "r", encoding="utf-8") as f:
                    favs = json.load(f)
                self.favorites = [(fav["latin"], fav["info"]) for fav in favs]
                logging.info(f"{len(self.favorites)} favoris charg√©s")
            else:
                self.favorites = []
        except Exception as e:
            logging.error(f"Erreur chargement favoris : {e}")
            self.favorites = []

    def display_details(self, item):
        index = self.result_list.row(item)
        if index < 0 or index >= len(self.results):
            logging.info("Aucun m√©dicament s√©lectionn√© pour d√©tails")
            self.details_area.clear()
            self.add_fav_button.setText("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
            return

        latin, info = self.results[index]
        logging.info(f"Affichage d√©tails : {latin}")
        query = self.search_input.text().strip()
        query_words = [w.lower() for w in query.split() if w]

        title = f"{info['russian']} ({latin})"
        symptoms = info.get('symptoms', [])

        highlighted_symptoms = [self.highlight_text(symptom, query_words) for symptom in symptoms]

        html = f"<h2>{self.highlight_text(title, query_words)}</h2><ul>"
        for s in highlighted_symptoms:
            html += f"<li>{s}</li>"
        html += "</ul>"

        self.details_area.setHtml(html)
        # Met √† jour le texte du bouton selon l'√©tat
        if any(fav[0] == latin for fav in self.favorites):
            self.add_fav_button.setText("–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
        else:
            self.add_fav_button.setText("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")

    def get_export_path(self, ext, filter_str):
        settings = QSettings("HomeopathyApp", "Export")
        last_dir = settings.value("last_export_dir", str(Path.home()))
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª", last_dir + f"/export.{ext}", filter_str)
        if file_path:
            settings.setValue("last_export_dir", str(Path(file_path).parent))
        return file_path

    def export_pdf(self):
        file_path = self.get_export_path("pdf", "PDF Files (*.pdf)")
        if not file_path:
            logging.info("Export PDF annul√©")
            return
        html = self.details_area.toHtml()
        printer = QPrinter()
        printer.setOutputFormat(QPrinter.PdfFormat)
        printer.setOutputFileName(file_path)
        from PyQt5.QtGui import QTextDocument
        doc = QTextDocument()
        doc.setHtml(html)
        doc.print_(printer)
        confirm_win = QWidget()
        confirm_win.setWindowTitle("–≠–∫—Å–ø–æ—Ä—Ç PDF")
        layout = QVBoxLayout()
        label = QLabel(f"PDF —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{file_path}")
        layout.addWidget(label)
        confirm_win.setLayout(layout)
        confirm_win.resize(400, 120)
        confirm_win.show()
        self.confirm_win = confirm_win
        logging.info(f"Export PDF : {file_path}")

    def export_txt(self):
        file_path = self.get_export_path("txt", "Text Files (*.txt)")
        if not file_path:
            logging.info("Export TXT annul√©")
            return
        text = self.details_area.toPlainText()
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(text)
        confirm_win = QWidget()
        confirm_win.setWindowTitle("–≠–∫—Å–ø–æ—Ä—Ç TXT")
        layout = QVBoxLayout()
        label = QLabel(f"TXT —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{file_path}")
        layout.addWidget(label)
        confirm_win.setLayout(layout)
        confirm_win.resize(400, 120)
        confirm_win.show()
        self.confirm_win = confirm_win
        logging.info(f"Export TXT : {file_path}")

    def export_html(self):
        file_path = self.get_export_path("html", "HTML Files (*.html)")
        if not file_path:
            logging.info("Export HTML annul√©")
            return
        html = self.details_area.toHtml()
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(html)
        confirm_win = QWidget()
        confirm_win.setWindowTitle("–≠–∫—Å–ø–æ—Ä—Ç HTML")
        layout = QVBoxLayout()
        label = QLabel(f"HTML —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{file_path}")
        layout.addWidget(label)
        confirm_win.setLayout(layout)
        confirm_win.resize(400, 120)
        confirm_win.show()
        self.confirm_win = confirm_win
        logging.info(f"Export HTML : {file_path}")

    def show_help(self):
        logging.info("Affichage de la fen√™tre d'aide")
        help_win = QWidget()
        help_win.setWindowTitle("–°–ø—Ä–∞–≤–∫–∞")
        if self.icon_path.exists():
            help_win.setWindowIcon(QIcon(str(self.icon_path)))
        layout = QVBoxLayout()
        label = QLabel(
            "<b>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b><br><br>"
            "<b>1. –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞:</b><br>"
            "- –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –∏–ª–∏ —Å–∏–º–ø—Ç–æ–º –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞.<br>"
            "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–∞–ª–æ—á–∫–∏ <b>–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</b> –∏ <b>–ü–æ —Å–∏–º–ø—Ç–æ–º–∞–º</b> –≤ –º–µ–Ω—é <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞.<br>"
            "- –ù–∞–∂–º–∏—Ç–µ <b>–ü–æ–∏—Å–∫</b> –∏–ª–∏ –∫–ª–∞–≤–∏—à—É Enter.<br><br>"
            "<b>2. –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</b><br>"
            "- –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–∏–º–ø—Ç–æ–º–æ–≤.<br><br>"
            "<b>3. –ò–∑–±—Ä–∞–Ω–Ω–æ–µ:</b><br>"
            "- –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (—Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏).<br>"
            "- –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é <b>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤.<br><br>"
            "<b>4. –≠–∫—Å–ø–æ—Ä—Ç:</b><br>"
            "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é <b>–≠–∫—Å–ø–æ—Ä—Ç</b> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–µ –≤ PDF, TXT –∏–ª–∏ HTML.<br><br>"
            "<b>5. –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b><br>"
            "- <b>Enter</b> ‚Äî –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫<br>"
            "- <b>Esc</b> ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫<br><br>"
            "<b>6. –°–æ–≤–µ—Ç—ã:</b><br>"
            "- –ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∫–∞–∫ –ø–æ —Ä—É—Å—Å–∫–æ–º—É, —Ç–∞–∫ –∏ –ø–æ –ª–∞—Ç–∏–Ω—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é.<br>"
            "- –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.<br><br>"
            "<i>–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ RoK-studio —Å –ø–æ–º–æ—â—å—é PyQt5.<br>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π.</i>"
        )
        label.setWordWrap(True)
        layout.addWidget(label)
        help_win.setLayout(layout)
        help_win.resize(600, 400)
        help_win.show()
        self.help_win = help_win  # —á—Ç–æ–±—ã –æ–∫–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª–æ—Å—å —Å—Ä–∞–∑—É

    def show_favorites_window(self):
        logging.info("Affichage de la fen√™tre favoris")
        fav_win = QWidget()
        fav_win.setWindowTitle("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
        if self.icon_path.exists():
            fav_win.setWindowIcon(QIcon(str(self.icon_path)))
        layout = QVBoxLayout()
        fav_list = QListWidget()
        fav_list.setFont(QFont("Segoe UI", 14))
        for latin, info in self.favorites:
            fav_list.addItem(f"{info['russian']} ({latin})")
        fav_list.itemClicked.connect(lambda item: self.show_fav_details(item, fav_list))
        layout.addWidget(fav_list)
        fav_win.setLayout(layout)
        fav_win.resize(400, 600)
        fav_win.show()
        self.fav_win = fav_win

    def show_fav_details(self, item, fav_list):
        index = fav_list.row(item)
        if index < 0 or index >= len(self.favorites):
            logging.info("Aucun favori s√©lectionn√© pour d√©tails")
            return
        latin, info = self.favorites[index]
        logging.info(f"Affichage d√©tails favori : {latin}")
        details_win = QWidget()
        details_win.setWindowTitle(f"{info['russian']} ({latin})")
        if self.icon_path.exists():
            details_win.setWindowIcon(QIcon(str(self.icon_path)))
        layout = QVBoxLayout()
        symptoms = "<br>".join(info.get('symptoms', []))
        label = QLabel(f"<b>{info['russian']} ({latin})</b><br><br>{symptoms}")
        label.setWordWrap(True)
        layout.addWidget(label)
        details_win.setLayout(layout)
        details_win.resize(500, 400)
        details_win.show()
        self.details_win = details_win

def validate_data(data):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    seen = set()
    for latin, info in data.items():
        if not isinstance(info, dict) or 'russian' not in info or 'symptoms' not in info:
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {latin}")
        key = (info['russian'], latin)
        if key in seen:
            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: {key}")
        seen.add(key)
    logging.info("Validation des donn√©es termin√©e")

def load_data():
    # Utilise le dossier courant pour le JSON
    json_path = Path(__file__).parent / "homeopathy.json"
    if not json_path.exists():
        # Lancer le parsing uniquement si le fichier n'existe pas
        parcing_path = Path(__file__).parent / "Parcing.py"
        try:
            subprocess.run([sys.executable, str(parcing_path)], check=True)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞:", e)
    if not json_path.exists():
        logging.warning(f"Fichier de donn√©es absent : {json_path}")
        raise FileNotFoundError(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
    with open(json_path, encoding="utf-8") as f:
        data = json.load(f)
    logging.info("Chargement des donn√©es")
    return data


def auto_update():
    try:
        with urllib.request.urlopen(GITHUB_VERSION_URL, timeout=5) as response:
            latest_version = response.read().decode("utf-8").strip()
        if latest_version != APP_VERSION:
            exe_path = Path(sys.argv[0])
            new_exe_path = exe_path.with_suffix(".new.exe")
            # T√©l√©charge la nouvelle version
            with urllib.request.urlopen(GITHUB_EXE_URL) as response, open(new_exe_path, "wb") as out_file:
                shutil.copyfileobj(response, out_file)
            # Remplace l'ex√©cutable courant
            os.replace(new_exe_path, exe_path)
            # Red√©marre l'application
            os.execv(str(exe_path), sys.argv)
    except Exception as e:
        pass  # Silencieux pour l'utilisateur

if __name__ == "__main__":
    auto_update()
    data = load_data()
    validate_data(data)
    app = QApplication(sys.argv)
    # Cr√©er et afficher la fen√™tre
    window = HomeopathyApp(data)
    window.show()

    logging.info("Application principale lanc√©e")
    sys.exit(app.exec_())